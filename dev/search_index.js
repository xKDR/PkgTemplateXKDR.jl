var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PkgTemplateXKDR","category":"page"},{"location":"#PkgTemplateXKDR","page":"Home","title":"PkgTemplateXKDR","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PkgTemplateXKDR.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is used to create package templates at xKDR which sets up a Git repository for packages, continuous integration for tests and documentation building using Documenter.jl. ","category":"page"},{"location":"#A-primer-on-creating-a-package-template","page":"Home","title":"A primer on creating a package template","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Suppose your package is called XYZ.jl. Here are the steps you should follow to set up the package template.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Create an empty git repository by the same name as the package, i.e XYZ.jl. The GitHub URL of your package should be github.com/xKDR/XYZ.jl.\nInstall PkgTemplateXKDR. \n pkg> add \"https://github.com/xKDR/PkgTemplateXKDR.jl.git\"\nGenerate a Template object via the PkgTemplateXKR.getPackageTemplate() function. Pass in the names of the authors as a list (by default this list will be [\"xKDR\"]), and the path where you want to put the package (by default this path will be your home directory).\n julia> using PkgTemplateXKDR\n julia> template = getPackageTemplate(authorList = [\"someone\", \"someone-else\"], packagePath = \"~\")\nCall the template with your package name. \n julia> template(\"XYZ.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"These steps will set up a Git repository at packagePath/XYZ, from where you can then push the code upstream.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: By default, the tests in the test folder will have their own dependencies in test/Project.toml. If a version of Julia less than 1.2 is used, these dependencies must be added in the main Project.toml.","category":"page"},{"location":"#Generating-secret-keys","page":"Home","title":"Generating secret keys","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To set up building documentation using Documenter.jl, you will also need to generate keys and put it in your repository. Follow these steps (again, we assume that the name of your package is XYZ.jl). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"First add the DocumenterTools package. \n pkg> add DocumenterTools\nGenerate public and private keys. \n julia> using DocumenterTools\n julia> DocumenterTools.genkeys(user=\"xKDR\", repo=\"XYZ.jl\")\nAdd the public key at https://github.com/xKDR/XYZ.jl/settings/keys with read/write access with title documenter. Check the \"Allow write access\" option.\nAdd a secure variable named DOCUMENTER_KEY at https://github.com/xKDR/XYZ.jl/settings/secrets. Set the value of DOCUMENTER_KEY to the generated private key. Make sure not to set it to be printed in the build log.","category":"page"},{"location":"","page":"Home","title":"Home","text":"After this, any commit or pull request to the main branch will build the fresh documentation in the gh-pages branch of your repository. You can configure Documenter.jl to further manage your documentation builds. ","category":"page"},{"location":"#Code-coverage-using-[Codecov](https://about.codecov.io/)","page":"Home","title":"Code coverage using Codecov","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package template also sets up code coverage, but certain steps will have to be done manually. If your first commit fails the code coverage CI, you can simply ignore it. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Ask one of the admins at xKDR to add your repository to Codecov, or if you are an admin you can do this by \nvisiting codecov.io and logging in using your GitHub account.\nAuthorizing Codecov to access xKDR's repositories.\nVisit the settings page of the repository at https://app.codecov.io/gh/xKDR/XYZ.jl/settings; make sure that the repository is activated at Codecov (which is true by default for public repositories).\nThe link for the coverage badge is already included in README.md, but the generated token must be added. For this, visit https://app.codecov.io/gh/xKDR/XYZ.jl/settings/badge, and replace <token> by the value there in the url in the README.md file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"After this, any new commits will send coverage report to Codecov, and the coverage percentage will be reflected in the badge you just added. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PkgTemplateXKDR]","category":"page"},{"location":"#PkgTemplateXKDR.getPackageTemplate-Tuple{}","page":"Home","title":"PkgTemplateXKDR.getPackageTemplate","text":"getPackageTemplate(; authorList=[\"xKDR\"], packagePath=\"~/\")\n\nReturn a Template object which will be used to create package templates.\n\nArguments\n\nauthorList::Vector{String}: A list of authors of the package. \npackagePath::String: Path where the package template is intended to be set up.\n\nReturn value\n\nAn object of type PkgTemplates.Template.\n\nExample\n\nusing PkgTemplateXKDR\ntemplate = getPackageTemplate(authorList=[\"author1\", \"author2\"], packagePath=\"./\")\ntemplate(\"MyPackage.jl\")   # sets up the package in the current working directory\n\n\n\n\n\n","category":"method"}]
}
